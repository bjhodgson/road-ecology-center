r[r == 0] <- NA
# Count number of NA's
num_zeros <- sum(is.na(values(r)))
print(paste("Number of NA values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
install.packages(ks)
install.packages("ks")
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
points <- st_read(path1)
points1 <- st_transform(points, crs = 4326)
# Extract coordinates
coordinates <- st_coordinates(points1)
# Add coordinates to the data frame
points1$x <- coordinates[,1]
points1$y <- coordinates[,2]
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
points <- st_read(path2)
points2 <- st_transform(points, crs = 4326)
# Extract coordinates
coordinates <- st_coordinates(points2)
# Add coordinates to the data frame
points2$x <- coordinates[,1]
points2$y <- coordinates[,2]
# Generate bootstrap replicates
nboot <- 1000  # Number of bootstrap replicates
boot_diff <- numeric(nboot)
for (i in 1:nboot) {
# Sample with replacement from points1 and points2
sample1 <- sample(points1, replace = TRUE)
sample2 <- sample(points2, replace = TRUE)
# Calculate KDE for each sample
kde1 <- density(sample1)
kde2 <- density(sample2)
# Compute difference in KDEs
boot_diff[i] <- kde1$y - kde2$y
}
# Convert points to ppp objects
ppp1 <- as.ppp(points1)
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
points <- st_read(path2)
points2 <- st_transform(points, crs = 4326)
# Extract coordinates
coordinates <- st_coordinates(points2)
# Add coordinates to the data frame
points2$x <- coordinates[,1]
points2$y <- coordinates[,2]
# Convert points to ppp objects
ppp1 <- as.ppp(points1)
# Transform to UTM Zone 10N (EPSG:32610) for spatial analysis
points1_proj <- st_transform(points1, crs = 32610)
points2_proj <- st_transform(points2, crs = 32610)
# Convert to ppp objects
ppp1 <- as.ppp(points1_proj)
View(points1_proj)
ppp2 <- as.ppp(points2_proj)
# Compute KDEs for both point patterns
kde1 <- density.ppp(ppp1)
kde2 <- density.ppp(ppp2)
# Calculate the difference in KDE values
kde_diff <- kde1$fhat - kde2$fhat
kde_diff
# Optionally, perform bootstrap resampling to assess significance
nboot <- 1000  # Number of bootstrap replicates
boot_diff <- numeric(nboot)
for (i in 1:nboot) {
# Sample with replacement from points1 and points2
sample1 <- sample(ppp1, replace = TRUE)
sample2 <- sample(ppp2, replace = TRUE)
# Compute KDE for each sample
kde_sample1 <- density.ppp(sample1)
kde_sample2 <- density.ppp(sample2)
# Compute difference in KDEs
boot_diff[i] <- kde_sample1$fhat - kde_sample2$fhat
}
library(raster)
library(spatstat)
library(sf)
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_compare_diff.tif"
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Mask out zero values
r[r == 0] <- NA
# Count number of NA's
num_zeros <- sum(is.na(values(r)))
print(paste("Number of NA values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_compare_diff.tif"
r <- raster(raster_file)
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Mask out zero values
r[r == 0] <- NA
# Count number of NA's
num_zeros <- sum(is.na(values(r)))
print(paste("Number of NA values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_compare_diff.tif"
r <- raster(raster_file)
# Mask out zero values
r[r == 0] <- NA
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Optionally, save the merged shapefile
CROS_shp_file <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\CROS_Medians.shp"
"C:\Users\HP\Downloads\Deer CROS Medians (5).xlsx"
# Optionally, save the merged shapefile
CROS_shp_file <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\CROS_Medians.shp"
st_write(merged_gdf, CROS_shp_file)
library(sf)
st_write(merged_gdf, CROS_shp_file)
excel_file = "C:\\Users\\HP\\Downloads\\Deer CROS Medians (5).xlsx"
output_df_name = "deer_df_raw"
process_excel_sheets(excel_file, output_df_name)
shp_file <- "C:\\Users\\HP\\Documents\\ArcGIS\\Projects\\District 9 Medians\\D9_deer\\D9_hwy_deer.shp"
deer_gdf <- st_read(shp_file)
deer_df <- deer_df_raw %>%
filter(deer_df_raw$NID %in% deer_gdf$nid)
df <- bind_rows(coyote_df, jackrabbit_df, deer_df) %>%
select(!Sheet) %>%
rename(MedianNotes = Notes,
)
library(writexl)
library(sf)
library(dplyr)
shp_file <- "C:\\Users\\HP\\Documents\\ArcGIS\\Projects\\District 9 Medians\\D9_deer\\D9_hwy_deer.shp"
deer_gdf <- st_read(shp_file)
deer_df <- deer_df_raw %>%
filter(deer_df_raw$NID %in% deer_gdf$nid)
excel_file = "C:\\Users\\HP\\Downloads\\Deer CROS Medians (5).xlsx"
output_df_name = "deer_df_raw"
process_excel_sheets(excel_file, output_df_name)
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>%
# Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
combined_df <- bind_rows(data_frames,
.id = "Sheet") %>%
filter(!is.na(MedianType)) # Filter out NA's
# Assign the combined data frame to the specified variable name in the parent environment
assign(output_df_name, combined_df, envir = .GlobalEnv)
}
process_excel_sheets(excel_file, output_df_name)
excel_file = "C:\\Users\\HP\\Downloads\\Deer CROS Medians (5).xlsx"
output_df_name = "deer_df_raw"
process_excel_sheets(excel_file, output_df_name)
excel_file = "C:\\Users\\HP\\Downloads\\Deer CROS Medians (5).xlsx"
output_df_name = "deer_df_raw"
process_excel_sheets(excel_file, output_df_name)
library(readxl)
library(dplyr)
library(lubridate)
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>%
# Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
combined_df <- bind_rows(data_frames,
.id = "Sheet") %>%
filter(!is.na(MedianType)) # Filter out NA's
# Assign the combined data frame to the specified variable name in the parent environment
assign(output_df_name, combined_df, envir = .GlobalEnv)
}
excel_file = "C:\\Users\\HP\\Downloads\\Deer CROS Medians (5).xlsx"
output_df_name = "deer_df_raw"
process_excel_sheets(excel_file, output_df_name)
shp_file <- "C:\\Users\\HP\\Documents\\ArcGIS\\Projects\\District 9 Medians\\D9_deer\\D9_hwy_deer.shp"
deer_gdf <- st_read(shp_file)
deer_df <- deer_df_raw %>%
filter(deer_df_raw$NID %in% deer_gdf$nid)
df <- bind_rows(coyote_df, jackrabbit_df, deer_df) %>%
select(!Sheet) %>%
rename(MedianNotes = Notes,
)
# Set paths
excel_file <- "C:\\Users\\HP\\Downloads\\Coyote CROS Medians.xlsx"
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets you want to exclude
selected_sheets <- sheets[!sheets %in% c("MedianTypes")]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
#mutate(StreetImageryDate = format(as.Date(StreetImageryDate, format = "%Y-%m-%d"), "%m/%Y"))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
coyote_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
filter(!is.na(MedianType)) # Filter out NA's
df <- bind_rows(coyote_df, jackrabbit_df, deer_df) %>%
select(!Sheet) %>%
rename(MedianNotes = Notes,
)
# Set paths
excel_file <- "C:\\Users\\HP\\Downloads\\Jackrabbit CROS Medians.xlsx"
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets you want to exclude
selected_sheets <- sheets[!sheets %in% c("MedianTypes")]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
#mutate(StreetImageryDate = format(as.Date(StreetImageryDate, format = "%Y-%m-%d"), "%m/%Y"))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
jackrabbit_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
filter(!is.na(MedianType)) # Filter out NA's
df <- bind_rows(coyote_df, jackrabbit_df, deer_df) %>%
select(!Sheet) %>%
rename(MedianNotes = Notes,
)
excel_path <- "C:\\Users\\HP\\Downloads\\D9_CROS_Medians.xlsx"
write_xlsx(df, excel_path)
# Merge deer_df with other_gdf based on NID attribute
merged_gdf <- inner_join(CROS_gdf, df, by = c("nid" = "NID")) %>%
rename(nid = NID)
df <- bind_rows(coyote_df, jackrabbit_df, deer_df) %>%
select(!Sheet) %>%
rename(MedianNotes = Notes,
nid = NID
)
View(df)
write_xlsx(df, excel_path)
# Read another shapefile to merge with
CROS_shp_file <- "D:\\Data\\Roadkill\\CROS-CHIPS-20240410-ND-All\\CROS-CHIPS-20240410-ND-All.shp"
CROS_gdf <- st_read(CROS_shp_file)
# Read another shapefile to merge with
CROS_shp_file <- "D:\\Data\\Roadkill\\CROS-CHIPS-20240410-ND-All(2)\\CROS-CHIPS-20240410-ND-All.shp"
CROS_gdf <- st_read(CROS_shp_file)
# Read another shapefile to merge with
CROS_shp_file <- "C:\\Users\\HP\\Downloads\\CROS-CHIPS-20240410-ND-All (2)\\CROS-CHIPS-20240410-ND-All.shp"
CROS_gdf <- st_read(CROS_shp_file)
# Merge deer_df with other_gdf based on NID attribute
merged_gdf <- inner_join(CROS_gdf, df, by = c("nid" = "nid")) %>%
rename(nid = NID)
# Merge deer_df with other_gdf based on NID attribute
merged_gdf <- inner_join(CROS_gdf, df, by = c("nid" = "nid"))
species_gdf <- merged_gdf %>%
select(nid,
animal,
StreetImageryDate,
MedianType,
SecondaryAttribute,
MedianWidth,
RoadsideBarrier,
MedianNotes) %>%
st_drop_geometry()
# Optionally, save the merged shapefile
CROS_shp_file <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\CROS_Medians.shp"
st_write(merged_gdf, CROS_shp_file)
50()
warnings()
View(merged_gdf)
# Write to excel
excel_output <- "C:\\Users\\HP\\Downloads\\CROS_Medians.xlsx"
species_df <- merged_gdf %>%
select(nid,
animal,
StreetImageryDate,
MedianType,
SecondaryAttribute,
MedianWidth,
RoadsideBarrier,
MedianNotes) %>%
st_drop_geometry()
write_xlsx(species_df, excel_output)
# Write to excel
excel_output <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\CROS_Medians.xlsx"
write_xlsx(species_df, excel_output)
excel_file <- "C:\\Users\\HP\\Downloads\\Untreated Points Medians (5).xlsx"
output_df_name <- "random_df"
process_excel_sheets(excel_file, output_df_name)
View(random_df)
excel_file <- "C:\\Users\\HP\\Downloads\\Untreated Points Medians (5).xlsx"
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets you want to exclude
selected_sheets <- sheets[!sheets %in% c("MedianTypes")]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>% # Convert type to character for binding
mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
mutate(StreetImageryDate = as.character(StreetImageryDate))
#mutate(StreetImageryDate = format(as.Date(StreetImageryDate, format = "%Y-%m-%d"), "%m/%Y"))
})
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
random_df <- bind_rows(data_frames,
.id = "Sheet") %>%
#select(-'Sheet') %>%
filter(!is.na(MedianType)) # Filter out NA's
excel_file <- "C:\\Users\\HP\\Downloads\\Untreated Points Medians (5).xlsx"
output_df_name <- "random_df"
process_excel_sheets(excel_file, output_df_name)
# Write to excel
excel_output <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\Untreated_Medians_07-31.xlsx"
write_xlsx(species_df, excel_output)
# Write to excel
excel_output <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\Untreated_Medians_07-31-24.xlsx"
# Write to excel
excel_output <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\Untreated_Medians_07-31-24.xlsx"
write_xlsx(species_df, excel_output)
# Write to excel
excel_output <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\Untreated_Medians_07-31-24.xlsx"
write_xlsx(random_df, excel_output)
process_excel_sheets(excel_file, output_df_name) %>%
select(!Sheet)
View(random_df)
process_excel_sheets(excel_file, output_df_name) %>%
select(!"Sheet")
process_excel_sheets(excel_file, output_df_name) %>%
select(-"Sheet")
excel_file <- "C:\\Users\\HP\\Downloads\\Untreated Points Medians (5).xlsx"
output_df_name <- "random_df"
process_excel_sheets(excel_file, output_df_name) %>%
select(-"Sheet")
View(random_df)
library(readxl)
library(dplyr)
library(lubridate)
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>%
# Convert type to character for binding
# mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
# mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
# mutate(StreetImageryDate = as.character(StreetImageryDate))
})
excel_file <- "C:\\Users\\HP\\Downloads\\Untreated Points Medians (5).xlsx"
output_df_name <- "random_df"
process_excel_sheets(excel_file, output_df_name) %>%
select(-"Sheet")
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df %>%
# Convert type to character for binding
# mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
# mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
# mutate(StreetImageryDate = as.character(StreetImageryDate))
})
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
# lapply(function(df) {
#   df %>%
#     # Convert type to character for binding
#     mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
#     mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
#     mutate(StreetImageryDate = as.character(StreetImageryDate))
# }
# )
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
combined_df <- bind_rows(data_frames,
.id = "Sheet") %>%
filter(!is.na(MedianType)) # Filter out NA's
# Assign the combined data frame to the specified variable name in the parent environment
assign(output_df_name, combined_df, envir = .GlobalEnv)
}
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df)
#   {
#   df %>%
#     # Convert type to character for binding
#     mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
#     mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
#     mutate(StreetImageryDate = as.character(StreetImageryDate))
# }
)
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df #%>%
# Convert type to character for binding
#mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
#mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
#mutate(StreetImageryDate = as.character(StreetImageryDate))
}
)
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
combined_df <- bind_rows(data_frames,
.id = "Sheet") %>%
filter(!is.na(MedianType)) # Filter out NA's
# Assign the combined data frame to the specified variable name in the parent environment
assign(output_df_name, combined_df, envir = .GlobalEnv)
}
excel_file <- "C:\\Users\\HP\\Downloads\\Untreated Points Medians (5).xlsx"
output_df_name <- "random_df"
process_excel_sheets(excel_file, output_df_name) %>%
select(-"Sheet")
View(random_df)
# Write to excel
excel_output <- "C:\\Users\\HP\\Downloads\\CROS_Medians\\Untreated_Medians_07-31-24.xlsx"
random_df %>%
select(-"Sheet") %>%
write_xlsx(, excel_output)
random_df %>%
select(-"Sheet") %>%
write_xlsx(excel_output)
random_df %>%
select(-"Sheet") %>%
write_xlsx(excel_output)
random_df %>%
rename(cid = CID) %>%
select(-c("Sheet", "...8")) %>%
write_xlsx(excel_output)

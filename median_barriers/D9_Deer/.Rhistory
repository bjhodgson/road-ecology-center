path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames
points1 <- st_read(path1)
points2 <- st_read(path2)
# Transform to a common coordinate system if needed (WGS84 for latitude and longitude)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the range of x and y coordinates
xrange <- range(c(points1$x, points2$x))
yrange <- range(c(points1$y, points2$y))
# Define the window to encompass all points
window <- owin(xrange = xrange, yrange = yrange)
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames
points1 <- st_read(path1)
points2 <- st_read(path2)
# Transform to a common coordinate system if needed (WGS84 for latitude and longitude)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the range of x and y coordinates
xrange <- range(c(points1$x, points2$x))
yrange <- range(c(points1$y, points2$y))
# Define the window to encompass all points
window <- owin(xrange = xrange, yrange = yrange)
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames
points1 <- st_read(path1)
points2 <- st_read(path2)
# Transform to a common coordinate system if needed (WGS84 for latitude and longitude)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax)
yrange <- c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax)
win <- owin(xrange = range(xrange), yrange = range(yrange))
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- Kest(ppp1)
K2 <- Kest(ppp2)
# Plot the K-functions for visual comparison
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Perform a test to compare the K-functions
test_result <- ks.test(K1, K2)
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames
points1 <- st_read(path1)
points2 <- st_read(path2)
# Transform to a common coordinate system if needed (WGS84 for latitude and longitude)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax)
yrange <- c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax)
win <- owin(xrange = range(xrange), yrange = range(yrange))
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- Kest(ppp1)
K2 <- Kest(ppp2)
# Plot the K-functions for visual comparison
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Perform a test to compare the K-functions
test_result <- ks.test(K1, K2)
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames
points1 <- st_read(path1)
points2 <- st_read(path2)
# Transform to a common coordinate system if needed (WGS84 for latitude and longitude)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- range(c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax), na.rm = TRUE)
yrange <- range(c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax), na.rm = TRUE)
win <- owin(xrange = xrange, yrange = yrange)
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- Kest(ppp1)
K2 <- Kest(ppp2)
# Plot the K-functions for visual comparison
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Perform a test to compare the K-functions
if (!anyNA(K1$border)) {
if (!anyNA(K2$border)) {
test_result <- ks.test(K1$border, K2$border)
print(test_result)
} else {
print("K2 K-function has NA values, cannot perform KS test.")
}
} else {
print("K1 K-function has NA values, cannot perform KS test.")
}
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames
points1 <- st_read(path1)
points2 <- st_read(path2)
# Transform to a common coordinate system if needed (WGS84 for latitude and longitude)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- range(c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax), na.rm = TRUE)
yrange <- range(c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax), na.rm = TRUE)
win <- owin(xrange = xrange, yrange = yrange)
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- suppressWarnings(try(Kest(ppp1), silent = TRUE))
K2 <- suppressWarnings(try(Kest(ppp2), silent = TRUE))
# Check if K-functions are valid
if (!inherits(K1, "try-error") && !inherits(K2, "try-error")) {
# Plot the K-functions for visual comparison
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Perform a test to compare the K-functions
test_result <- ks.test(K1$border, K2$border)
print(test_result)
} else {
print("Error calculating K-functions. Ensure there are valid points in the specified window.")
}
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames
points1 <- st_read(path1)
points2 <- st_read(path2)
# Transform to a common coordinate system if needed (WGS84 for latitude and longitude)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- range(c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax), na.rm = TRUE)
yrange <- range(c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax), na.rm = TRUE)
win <- owin(xrange = xrange, yrange = yrange)
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- suppressWarnings(try(Kest(ppp1), silent = TRUE))
K2 <- suppressWarnings(try(Kest(ppp2), silent = TRUE))
# Check if K-functions are valid
if (!inherits(K1, "try-error") && !inherits(K2, "try-error")) {
# Plot the K-functions for visual comparison
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Perform a test to compare the K-functions
test_result <- ks.test(K1$border, K2$border)
print(test_result)
} else {
print("Error calculating K-functions. Ensure there are valid points in the specified window.")
}
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames and transform to a common coordinate system (WGS84)
points1 <- st_read(path1)
points2 <- st_read(path2)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- range(c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax), na.rm = TRUE)
yrange <- range(c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax), na.rm = TRUE)
win <- owin(xrange = xrange, yrange = yrange)
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- Kest(ppp1)
K2 <- Kest(ppp2)
# Plot the K-functions for visual comparison
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Perform a test to compare the K-functions
test_result <- ks.test(K1$border, K2$border)
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames and transform to a common coordinate system (WGS84)
points1 <- st_read(path1)
points2 <- st_read(path2)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- range(c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax), na.rm = TRUE)
yrange <- range(c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax), na.rm = TRUE)
win <- owin(xrange = xrange, yrange = yrange)
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- Kest(ppp1)
K2 <- Kest(ppp2)
# Compare the K-functions (observed and theoretical)
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Optionally, perform a test for significant difference
test_result <- envelope.Kest(K1, K2, nsim = 99)
# Load necessary libraries
library(sf)
library(spatstat)
# Specify paths to shapefiles
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
# Read shapefiles into data frames and transform to a common coordinate system (WGS84)
points1 <- st_read(path1)
points2 <- st_read(path2)
points1 <- st_transform(points1, crs = 4326)
points2 <- st_transform(points2, crs = 4326)
# Determine the extent of the points
extent1 <- st_bbox(points1)
extent2 <- st_bbox(points2)
# Define the window to encompass all points
xrange <- range(c(extent1$xmin, extent1$xmax, extent2$xmin, extent2$xmax), na.rm = TRUE)
yrange <- range(c(extent1$ymin, extent1$ymax, extent2$ymin, extent2$ymax), na.rm = TRUE)
win <- owin(xrange = xrange, yrange = yrange)
# Convert to ppp objects with the updated window
ppp1 <- ppp(points1$x, points1$y, window = win)
ppp2 <- ppp(points2$x, points2$y, window = win)
# Calculate the K-function for both point patterns
K1 <- Kest(ppp1)
K2 <- Kest(ppp2)
# Compare the K-functions (observed and theoretical)
plot(K1, main = "K-function comparison")
plot(K2, add = TRUE, col = "red")
# Optionally, perform a test for significant difference
test_result <- envelope.Kest(K1, K2, nsim = 99)
# Optionally, perform a test for significant difference
test_result <- envelope.(K1, K2, nsim = 99)
# Optionally, perform a test for significant difference
test_result <- envelope(K1, K2, nsim = 99)
library(raster)
library(spatstat)
library(sf)
# Check KDE difference
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\KDE_diff.tif"
r <- raster(raster_file)
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Plot histogram of raster values
density(as.vector(values(r)), main = "Histogram of Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Omit values of 0
r <- mask(r, r != 0)
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Omit values of 0
r <- mask(r, r != 0)
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Omit values of 0
r <- mask(r, r != 0)
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Omit values of 0
r_masked <- mask(r, r != 0)
# Calculate the mean value of the raster
mean_value <- cellStats(r_masked, stat = 'mean')
print(mean_value)
# Omit values of 0
r <- mask(r, maskvalue = 0, updatevalue = NA)
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Omit values of 0
r <- mask(r, maskvalue = 0, updatevalue = NA)
# Mask out zero values
r[r == 0] <- NA
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Mask out zero values
r[r == 0] <- NA
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Count number of zeros
num_zeros <- sum(values(r) == NA)
print(paste("Number of zero values in the raster:", num_zeros))
# Count number of zeros
num_zeros <- sum(is.na(values(r)))
print(paste("Number of zero values in the raster:", num_zeros))
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Mask out zero values
r[r == 0] <- NA
# Count number of NA's
num_zeros <- sum(is.na(values(r)))
print(paste("Number of NA values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
install.packages(ks)
install.packages("ks")
path1 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_all\\D9_random_all.shp"
points <- st_read(path1)
points1 <- st_transform(points, crs = 4326)
# Extract coordinates
coordinates <- st_coordinates(points1)
# Add coordinates to the data frame
points1$x <- coordinates[,1]
points1$y <- coordinates[,2]
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
points <- st_read(path2)
points2 <- st_transform(points, crs = 4326)
# Extract coordinates
coordinates <- st_coordinates(points2)
# Add coordinates to the data frame
points2$x <- coordinates[,1]
points2$y <- coordinates[,2]
# Generate bootstrap replicates
nboot <- 1000  # Number of bootstrap replicates
boot_diff <- numeric(nboot)
for (i in 1:nboot) {
# Sample with replacement from points1 and points2
sample1 <- sample(points1, replace = TRUE)
sample2 <- sample(points2, replace = TRUE)
# Calculate KDE for each sample
kde1 <- density(sample1)
kde2 <- density(sample2)
# Compute difference in KDEs
boot_diff[i] <- kde1$y - kde2$y
}
# Convert points to ppp objects
ppp1 <- as.ppp(points1)
path2 <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\D9_random_S_P\\D9_random_S_P.shp"
points <- st_read(path2)
points2 <- st_transform(points, crs = 4326)
# Extract coordinates
coordinates <- st_coordinates(points2)
# Add coordinates to the data frame
points2$x <- coordinates[,1]
points2$y <- coordinates[,2]
# Convert points to ppp objects
ppp1 <- as.ppp(points1)
# Transform to UTM Zone 10N (EPSG:32610) for spatial analysis
points1_proj <- st_transform(points1, crs = 32610)
points2_proj <- st_transform(points2, crs = 32610)
# Convert to ppp objects
ppp1 <- as.ppp(points1_proj)
View(points1_proj)
ppp2 <- as.ppp(points2_proj)
# Compute KDEs for both point patterns
kde1 <- density.ppp(ppp1)
kde2 <- density.ppp(ppp2)
# Calculate the difference in KDE values
kde_diff <- kde1$fhat - kde2$fhat
kde_diff
# Optionally, perform bootstrap resampling to assess significance
nboot <- 1000  # Number of bootstrap replicates
boot_diff <- numeric(nboot)
for (i in 1:nboot) {
# Sample with replacement from points1 and points2
sample1 <- sample(ppp1, replace = TRUE)
sample2 <- sample(ppp2, replace = TRUE)
# Compute KDE for each sample
kde_sample1 <- density.ppp(sample1)
kde_sample2 <- density.ppp(sample2)
# Compute difference in KDEs
boot_diff[i] <- kde_sample1$fhat - kde_sample2$fhat
}
library(raster)
library(spatstat)
library(sf)
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_compare_diff.tif"
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Mask out zero values
r[r == 0] <- NA
# Count number of NA's
num_zeros <- sum(is.na(values(r)))
print(paste("Number of NA values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_compare_diff.tif"
r <- raster(raster_file)
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_diff.tif"
r <- raster(raster_file)
# Count number of zeros
num_zeros <- sum(values(r) == 0)
print(paste("Number of zero values in the raster:", num_zeros))
# Mask out zero values
r[r == 0] <- NA
# Count number of NA's
num_zeros <- sum(is.na(values(r)))
print(paste("Number of NA values in the raster:", num_zeros))
# Calculate the mean value of the raster
mean_value <- cellStats(r, stat = 'mean')
print(mean_value)
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")
# Load the raster file
raster_file <- "D:\\Median Barriers\\CROS Search\\validate_randomness\\KDE_compare_diff.tif"
r <- raster(raster_file)
# Mask out zero values
r[r == 0] <- NA
# Plot histogram of raster values
hist(as.vector(values(r)), main = "Histogram of Non-zero Raster Values",
xlab = "Raster Values", ylab = "Frequency")

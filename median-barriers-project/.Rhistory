significant_categories <- abs(residuals) > 2
print("Significant Categories (True indicates significant):")
print(significant_categories)
tab1 <- left_join(deer_sum, random_sum, by = "MedianType")
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("deer", "random")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# View the results
chi_test
chi_test$expected  # View expected counts if needed
# Observed frequencies for the deer counts
observed_counts <- tab1$deer
# Expected frequencies using the random counts
expected_counts <- tab1$random
# Perform the Chi-square goodness-of-fit test with exact p-values to account for low counts
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts))
# View the results
goodness_of_fit_test
# Calculate expected frequencies
expected_frequencies <- outer(rowSums(contingency_table), colSums(contingency_table))
# Calculate Pearson's residuals
observed_frequencies <- contingency_table
residuals <- (observed_frequencies - expected_frequencies) / sqrt(expected_frequencies)
# Print residuals
print("Pearson's Residuals:")
print(residuals)
# Identify significant categories
significant_categories <- abs(residuals) > 2
print("Significant Categories (True indicates significant):")
print(significant_categories)
expected_counts
expected_counts / sum(expected_counts)
sum(expected_counts / sum(expected_counts))
# Calculate expected frequencies
expected_frequencies <- tab1$random
# Calculate Pearson's residuals
observed_frequencies <- contingency_table
residuals <- (observed_frequencies - expected_frequencies) / sqrt(expected_frequencies)
# Print residuals
print("Pearson's Residuals:")
print(residuals)
observed_frequencies
colnames(contingency_table) <- c("Observed", "Expected")
rownames(contingency_table) <- c("Category 1", "Category 2", "Category 3", "Category 4", "Category 5", "Category 6")
summary(assoc(contingency_table))
mosaic(contingency_table, shade = TRUE, legend = TRUE)
deer_comb <- right_join(
deer_gdf, deer_df,
by = "nid"
) %>%
select("nid", "condition", "MedianType")
unique(deer_comb$MedianType)
deer_comb <- deer_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(deer_comb$MedianType)
deer_sum <- deer_comb %>%
#filter(!MedianType == "cable") %>%
group_by(MedianType) %>%
count() %>%
rename(observed = n)
unique(deer_sum$MedianType)
random_gdf$cid <- random_gdf$CID
random_comb <- right_join(
random_gdf, random_df,
by = "cid"
) %>%
select("cid", "MedianType")
unique(random_comb$MedianType)
random_comb <- random_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(random_comb$MedianType)
random_sum <- random_comb %>%
#filter(!MedianType == "cable") %>%
group_by(MedianType) %>%
count() %>%
rename(expected = n)
unique(random_sum$MedianType)
tab1 <- left_join(deer_sum, random_sum, by = "MedianType")
tab1
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("deer", "random")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("observed", "expected")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# View the results
chi_test
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("observed", "expected")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# View the results
chi_test
chi_test$expected  # View expected counts if needed
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts))
# View the results
goodness_of_fit_test
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = TRUE)
# View the results
goodness_of_fit_test
fisher.test(contingency_table, simulate.p.value = TRUE)
fisher.test(contingency_table, simulate.p.value = FALSE)
fisher.test(contingency_table, simulate.p.value = TRUE)
fisher.test(contingency_table, simulate.p.value = TRUE)
colnames(contingency_table) <- c("Observed", "Expected")
rownames(contingency_table) <- c("Category 1", "Category 2", "Category 3", "Category 4", "Category 5", "Category 6")
fisher.test(contingency_table, simulate.p.value = TRUE)
# Identify significant categories
significant_categories <- abs(residuals) > 2
print("Significant Categories (True indicates significant):")
print(significant_categories)
# Calculate expected frequencies
expected_frequencies <- tab1$random
# Calculate Pearson's residuals
observed_frequencies <- contingency_table
residuals <- (observed_frequencies - expected_frequencies) / sqrt(expected_frequencies)
tab1 <- left_join(deer_sum, random_sum, by = "MedianType")
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("observed", "expected")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# View the results
chi_test
chi_test$expected  # View expected counts if needed
# Observed frequencies for the deer counts
observed_counts <- tab1$deer
# Expected frequencies using the random counts
expected_counts <- tab1$random
# Observed frequencies for the deer counts
observed_counts <- tab1$observed
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = TRUE)
# Expected frequencies using the random counts
expected_counts <- tab1$expected
# View the results
goodness_of_fit_test
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts))
# View the results
goodness_of_fit_test
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = TRUE)
# View the results
goodness_of_fit_test
tab1 <- tab1 %>%
filter(!MedianType == "cable")
# Observed frequencies for the deer counts
observed_counts <- tab1$observed
# Expected frequencies using the random counts
expected_counts <- tab1$expected
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = TRUE)
# View the results
goodness_of_fit_test
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results
goodness_of_fit_test
tab1 <- left_join(deer_sum, random_sum, by = "MedianType")
# Observed frequencies for the deer counts
observed_counts <- tab1$observed
# Expected frequencies using the random counts
expected_counts <- tab1$expected
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results
goodness_of_fit_test
# Observed frequencies for the deer counts
observed_counts <- tab1$observed / sum(tab1$observed)
# Expected frequencies using the random counts
expected_counts <- tab1$expected
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results
goodness_of_fit_test
# Observed frequencies for the deer counts
observed_counts <- tab1$observed
# Expected frequencies using the random counts
expected_counts <- tab1$expected
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results
goodness_of_fit_test
# ----------------------------------------
# Data Load-in
# ----------------------------------------
# Load config
suppressMessages(source("config.R"))
# Create list of raw data files by type
path <- "data/raw"
files_list <- list(
"xlsx_files" <- list.files(path = path, pattern = "\\.xlsx$", full.names = TRUE),
"shp_files" <- list.files(path = path, pattern = "\\.shp.zip$", full.names = TRUE)
)
#print(files_list)
# Create empty list to store new dataframes
df_list <- list()
# Loop through xlsx files and create dataframes for each file
for (xlsx in xlsx_files) {
# Process xlsx files and rename dataframes
output_name <- process_and_name_xlsx(xlsx, "df") # Add "df" suffix string
# Append the newly created dataframe to the list
df_list[[output_name]] <- get(output_name)  # Use get to retrieve the dataframe by its name
}
names(df_list) # Print dfs in list
# Create empty list to store new geodataframes
gdf_list <- list()
# Loop through shapefiles and create geodataframes for each file
for (shp in shp_files) {
# Create object name from file name
name <- create_name(shp, "gdf") # Add "gdf" suffix string
# Read in the shapefile
shp_data <- suppressMessages(st_read(shp))
# Dynamically assign the read data to the created name
assign(name, shp_data)
# Append the newly created geodataframe to the list
gdf_list[[name]] <- shp_data
# Optionally print the name of the created object
print(paste("Created object:", name))
}
names(gdf_list) # Print gdfs in list
# ----------------------------------------
# Raw Data Cleanup
# ----------------------------------------
# Pre-process dataframes
gdf_list[["deer_gdf"]]$observatio
# just do in list
# Loop through each dataframe in df_list to standardize date format
for (df_name in names(df_list)) {
# Access the dataframe from df_list
df_list[[df_name]] <- standardize_dates(df_list[[df_name]]$StreetImageryDate)
# Print message for updated dataframe in the list
print(paste("Updated in df_list:", df_name))
# Check if a dataframe with the same name exists in the global environment
if (exists(df_name, envir = .GlobalEnv)) {
# Access the dataframe from the global environment
df <- get(df_name, envir = .GlobalEnv)
# Standardize the dates in the StreetImageryDate column
if ("StreetImageryDate" %in% colnames(df)) {
df$StreetImageryDate <- standardize_dates(df$StreetImageryDate)
# Assign the updated dataframe back to the global environment
assign(df_name, df, envir = .GlobalEnv)
# Print message for updated dataframe in the global environment
print(paste("Updated in global environment:", df_name))
} else {
print(paste("Column 'StreetImageryDate' not found in:", df_name))
}
} else {
print(paste("Dataframe not found in global environment:", df_name))
}
} # MAY BE MORE COMPLEX THAN NECESSARY
unique(deer_gdf$condition)
source("scripts/d2_data_prep.R")
deer_comb <- right_join(
deer_gdf, deer_df,
by = "nid"
) %>%
select("nid", "condition", "MedianType")
unique(deer_comb$MedianType)
deer_comb <- deer_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(deer_comb$MedianType)
deer_sum <- deer_comb %>%
#filter(!MedianType == "cable") %>%
group_by(MedianType) %>%
count() %>%
rename(observed = n)
unique(deer_sum$MedianType)
random_gdf$cid <- random_gdf$CID
random_comb <- right_join(
random_gdf, random_df,
by = "cid"
) %>%
select("cid", "MedianType")
unique(random_comb$MedianType)
random_comb <- random_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(random_comb$MedianType)
random_sum <- random_comb %>%
#filter(!MedianType == "cable") %>%
group_by(MedianType) %>%
count() %>%
rename(expected = n)
unique(random_sum$MedianType)
tab1 <- left_join(deer_sum, random_sum, by = "MedianType")
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("observed", "expected")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# View the results
chi_test
chi_test$expected  # View expected counts if needed
# tab1 <- tab1 %>%
#   filter(!MedianType == "cable")
# Observed frequencies for the deer counts
observed_counts <- tab1$observed
# Expected frequencies using the random counts
expected_counts <- tab1$expected
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results
goodness_of_fit_test
# Calculate expected frequencies
expected_frequencies <- tab1$random
# Calculate Pearson's residuals
observed_frequencies <- contingency_table
residuals <- (observed_frequencies - expected_frequencies) / sqrt(expected_frequencies)
# Calculate expected frequencies
expected_frequencies <- tab1$expected
source("scripts/d2_data_prep.R")
deer_comb <- right_join(
deer_gdf, deer_df,
by = "nid"
) %>%
select("nid", "condition", "MedianType")
unique(deer_comb$MedianType)
deer_comb <- deer_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(deer_comb$MedianType)
deer_sum <- deer_comb %>%
#filter(!MedianType == "cable") %>%
group_by(MedianType) %>%
count() %>%
rename(observed = n)
unique(deer_sum$MedianType)
random_gdf$cid <- random_gdf$CID
random_comb <- right_join(
random_gdf, random_df,
by = "cid"
) %>%
select("cid", "MedianType")
unique(random_comb$MedianType)
random_comb <- random_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(random_comb$MedianType)
random_sum <- random_comb %>%
#filter(!MedianType == "cable") %>%
group_by(MedianType) %>%
count() %>%
rename(expected = n)
unique(random_sum$MedianType)
tab1 <- left_join(deer_sum, random_sum, by = "MedianType")
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("observed", "expected")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# View the results
chi_test
chi_test$expected  # View expected counts if needed
# tab1 <- tab1 %>%
#   filter(!MedianType == "cable")
# Observed frequencies for the deer counts
observed_counts <- tab1$observed
# Expected frequencies using the random counts
expected_counts <- tab1$expected
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results
goodness_of_fit_test
# Calculate expected frequencies
expected_frequencies <- tab1$expected
# Calculate Pearson's residuals
observed_frequencies <- contingency_table
residuals <- (observed_frequencies - expected_frequencies) / sqrt(expected_frequencies)
# Print residuals
print("Pearson's Residuals:")
print(residuals)
# Identify significant categories
significant_categories <- abs(residuals) > 2
print("Significant Categories (True indicates significant):")
print(significant_categories)
fisher.test(contingency_table, simulate.p.value = TRUE)
colnames(contingency_table) <- c("Observed", "Expected")
rownames(contingency_table) <- c("Category 1", "Category 2", "Category 3", "Category 4", "Category 5", "Category 6")
summary(assoc(contingency_table))
mosaic(contingency_table, shade = TRUE, legend = TRUE)
squirrel_comb <- right_join(
squirrel_gdf, squirrel_df,
by = "nid"
) %>%
select("nid", "condition", "MedianType")
View(squirrel_comb)
unique(squirrel_comb$condition)
unique(squirrel_comb$MedianType)
squirrel_comb <- squirrel_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(squirrel_comb$MedianType)
squirrel_comb <- right_join(
squirrel_gdf, squirrel_df,
by = "nid"
) %>%
select("nid", "condition", "MedianType")
unique(squirrel_comb$MedianType)
squirrel_comb <- squirrel_comb %>%
as.data.frame() %>%
mutate(MedianType = case_when(
str_detect(MedianType, "thrie beam") ~ "thrie beam", # If "thrie beam" is anywhere in the string, change to "thrie beam"
str_detect(MedianType, "concrete") ~ "concrete",
str_detect(MedianType, "cable") ~ "cable",
str_detect(MedianType, "gravel") & str_detect(MedianType, "vegetative") ~ "vegetative",
TRUE ~ MedianType # Keep other values as they are
))
unique(squirrel_comb$MedianType)
squirrel_sum <- squirrel_comb %>%
#filter(!MedianType == "cable") %>%
group_by(MedianType) %>%
count() %>%
rename(observed = n)
unique(squirrel_sum$MedianType)
View(squirrel_sum)
tab2 <- left_join(squirrel_sum, random_sum, by = "MedianType")
# Create contingency table with only the counts
contingency_table <- as.matrix(tab1[, c("observed", "expected")])
tab2 <- left_join(squirrel_sum, random_sum, by = "MedianType")
# Create contingency table with only the counts
contingency_table <- as.matrix(tab2[, c("observed", "expected")])
# Perform Chi-square test
chi_test <- chisq.test(contingency_table)
# View the results
chi_test
chi_test$expected  # View expected counts if needed
# Observed frequencies for the deer counts
observed_counts <- tab2$observed
# Expected frequencies using the random counts
expected_counts <- tab2$expected
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results
goodness_of_fit_test
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = TRUE)
# View the results
goodness_of_fit_test
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALse)
# Perform the Chi-square goodness-of-fit test
goodness_of_fit_test <- chisq.test(observed_counts, p = expected_counts / sum(expected_counts), simulate.p.value = FALSE)
# View the results# View the resultsFALSE
goodness_of_fit_test
# Calculate expected frequencies
expected_frequencies <- tab1$expected
# Calculate Pearson's residuals
observed_frequencies <- contingency_table
residuals <- (observed_frequencies - expected_frequencies) / sqrt(expected_frequencies)
# Print residuals
print("Pearson's Residuals:")
print(residuals)
# Identify significant categories
significant_categories <- abs(residuals) > 2
print("Significant Categories (True indicates significant):")
print(significant_categories)
fisher.test(contingency_table, simulate.p.value = TRUE)
colnames(contingency_table) <- c("Observed", "Expected")
rownames(contingency_table) <- c("Category 1", "Category 2", "Category 3", "Category 4", "Category 5", "Category 6")
colnames(contingency_table) <- c("Observed", "Expected")
rownames(contingency_table) <- c("Category 1", "Category 2", "Category 3")
summary(assoc(contingency_table))
mosaic(contingency_table, shade = TRUE, legend = TRUE)

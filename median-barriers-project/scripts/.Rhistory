df <- as.data.frame()
df <- as.data.frame(c("Cev"))
View(df)
source("scripts/d2_data_prep.R")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
library(sf)
library(dplyr)
library(readxl)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
View(random)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
library(sf)
library(dplyr)
library(readxl)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
deer_path <- "D:\\Downloads\\D9 Deer CROS Medians.xlsx"
process_excel_sheets(deer_path, "deer_raw")
deer_raw <- deer_raw %>%
rename(nid = NID)
deer_df <- merge(as.data.frame(deer), deer_raw, "nid")
deer_df <- deer_df %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", Notes, ignore.case = TRUE)) # Remove bridges
deer_count <- deer_df %>%
count(MedianType) %>%
rename(Count = n)
random_df <- as.data.frame(random) %>%
rename(MedianType = MednTyp,
MedianNotes = MednNts) %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", MedianNotes, ignore.case = TRUE)) %>% # Remove bridges
mutate(MedianType = case_when( # Standardize values
MedianType == "vegetative, thrie beam" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "thrie beam, vegetative" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "gravel, vegetative" ~ "vegetative",
MedianType == "vegetative, gravel" ~ "vegetative",
MedianType == "temp concrete" ~ "concrete",
MedianType == "thrie beam and veg" ~ "thrie beam",
TRUE ~ MedianType  # Retain original value if no condition is met
))  %>%
filter(MedianType != "thrie beam")
# set.seed(123)  # Set a seed for reproducibility
# random_df <- random_df %>%
#   slice_sample(n = 273)
random_count <- random_df %>%
count(MedianType) %>%
rename(Count = n)
# Calculate total counts
total_observed <- sum(deer_count$Count)
total_expected <- sum(random_count$Count)
# Calculate proportions
observed_proportions <- deer_count$Count / total_observed
expected_proportions <- random_count$Count / total_expected
# Perform Chi-Square Goodness of Fit Test
chisq_test <- chisq.test(deer_count$Count, p = expected_proportions)
print(chisq_test)
library(sf)
library(dplyr)
library(readxl)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
deer_path <- "D:\\Downloads\\D9 Deer CROS Medians.xlsx"
process_excel_sheets(deer_path, "deer_raw")
deer_raw <- deer_raw %>%
rename(nid = NID)
deer_df <- merge(as.data.frame(deer), deer_raw, "nid")
deer_df <- deer_df %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", Notes, ignore.case = TRUE)) # Remove bridges
deer_count <- deer_df %>%
count(MedianType) %>%
rename(Count = n)
random_df <- as.data.frame(random) %>%
# rename(MedianType = MednTyp,
#        MedianNotes = MednNts) %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", MedianNotes, ignore.case = TRUE)) %>% # Remove bridges
mutate(MedianType = case_when( # Standardize values
MedianType == "vegetative, thrie beam" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "thrie beam, vegetative" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "gravel, vegetative" ~ "vegetative",
MedianType == "vegetative, gravel" ~ "vegetative",
MedianType == "temp concrete" ~ "concrete",
MedianType == "thrie beam and veg" ~ "thrie beam",
TRUE ~ MedianType  # Retain original value if no condition is met
))  %>%
filter(MedianType != "thrie beam")
# set.seed(123)  # Set a seed for reproducibility
# random_df <- random_df %>%
#   slice_sample(n = 273)
random_count <- random_df %>%
count(MedianType) %>%
rename(Count = n)
# Calculate total counts
total_observed <- sum(deer_count$Count)
total_expected <- sum(random_count$Count)
# Calculate proportions
observed_proportions <- deer_count$Count / total_observed
expected_proportions <- random_count$Count / total_expected
# Perform Chi-Square Goodness of Fit Test
chisq_test <- chisq.test(deer_count$Count, p = expected_proportions)
print(chisq_test)
library(sf)
library(dplyr)
library(readxl)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
deer_path <- "D:\\Downloads\\D9 Deer CROS Medians.xlsx"
process_excel_sheets(deer_path, "deer_raw")
deer_raw <- deer_raw %>%
rename(nid = NID)
deer_df <- merge(as.data.frame(deer), deer_raw, "nid")
deer_df <- deer_df %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", Notes, ignore.case = TRUE)) # Remove bridges
deer_count <- deer_df %>%
count(MedianType) %>%
rename(Count = n)
random_df <- as.data.frame(random) %>%
# rename(MedianType = MednTyp,
#        MedianNotes = MednNts) %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", MedianNotes, ignore.case = TRUE)) %>% # Remove bridges
mutate(MedianType = case_when( # Standardize values
MedianType == "vegetative, thrie beam" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "thrie beam, vegetative" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "gravel, vegetative" ~ "vegetative",
MedianType == "vegetative, gravel" ~ "vegetative",
MedianType == "temp concrete" ~ "concrete",
MedianType == "thrie beam and veg" ~ "thrie beam",
TRUE ~ MedianType  # Retain original value if no condition is met
))  %>%
filter(MedianType != "thrie beam")
# set.seed(123)  # Set a seed for reproducibility
# random_df <- random_df %>%
#   slice_sample(n = 273)
random_count <- random_df %>%
count(MedianType) %>%
rename(Count = n)
# Calculate total counts
total_observed <- sum(deer_count$Count)
total_expected <- sum(random_count$Count)
# Calculate proportions
observed_proportions <- deer_count$Count / total_observed
expected_proportions <- random_count$Count / total_expected
# Perform Chi-Square Goodness of Fit Test
chisq_test <- chisq.test(deer_count$Count, p = expected_proportions)
print(chisq_test)
library(sf)
library(dplyr)
library(readxl)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
deer_path <- "D:\\Downloads\\D9 Deer CROS Medians.xlsx"
process_excel_sheets(deer_path, "deer_raw")
deer_raw <- deer_raw %>%
rename(nid = NID)
deer_df <- merge(as.data.frame(deer), deer_raw, "nid")
deer_df <- deer_df %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", Notes, ignore.case = TRUE)) # Remove bridges
deer_count <- deer_df %>%
count(MedianType) %>%
rename(Count = n)
random_df <- as.data.frame(random) %>%
# rename(MedianType = MednTyp,
#        MedianNotes = MednNts) %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", MedianNotes, ignore.case = TRUE)) %>% # Remove bridges
mutate(MedianType = case_when( # Standardize values
MedianType == "vegetative, thrie beam" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "thrie beam, vegetative" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "gravel, vegetative" ~ "vegetative",
MedianType == "vegetative, gravel" ~ "vegetative",
MedianType == "temp concrete" ~ "concrete",
MedianType == "thrie beam and veg" ~ "thrie beam",
TRUE ~ MedianType  # Retain original value if no condition is met
))  %>%
filter(MedianType != "thrie beam")
# set.seed(123)  # Set a seed for reproducibility
# random_df <- random_df %>%
#   slice_sample(n = 273)
random_count <- random_df %>%
count(MedianType) %>%
rename(Count = n)
# Calculate total counts
total_observed <- sum(deer_count$Count)
total_expected <- sum(random_count$Count)
# Calculate proportions
observed_proportions <- deer_count$Count / total_observed
expected_proportions <- random_count$Count / total_expected
# Perform Chi-Square Goodness of Fit Test
chisq_test <- chisq.test(deer_count$Count, p = expected_proportions)
print(chisq_test)
random_df <- as.data.frame(random) %>%
# rename(MedianType = MednTyp,
#        MedianNotes = MednNts) %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", MedianNotes, ignore.case = TRUE)) %>% # Remove bridges
mutate(MedianType = case_when( # Standardize values
MedianType == "vegetative, thrie beam" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "thrie beam, vegetative" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "gravel, vegetative" ~ "vegetative",
MedianType == "vegetative, gravel" ~ "vegetative",
MedianType == "temp concrete" ~ "concrete",
MedianType == "thrie beam and veg" ~ "thrie beam",
TRUE ~ MedianType  # Retain original value if no condition is met
))  %>%
filter(MedianType != "thrie beam")
random_count <- random_df %>%
count(MedianType) %>%
rename(Count = n)
# Calculate total counts
total_observed <- sum(deer_count$Count)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
deer_path <- "D:\\Downloads\\D9 Deer CROS Medians.xlsx"
process_excel_sheets(deer_path, "deer_raw")
library(readxl)
library(dplyr)
library(lubridate)
process_excel_sheets <- function(excel_file, output_df_name, exclude_sheets = c("MedianTypes")) {
# Read in Excel sheets
sheets <- excel_sheets(excel_file)
# Filter out the sheets to exclude
selected_sheets <- sheets[!sheets %in% exclude_sheets]
# Read the selected sheets into a list of data frames
data_frames <- lapply(selected_sheets, function(sheet) {
read_excel(excel_file, sheet = sheet)
}) %>%
lapply(function(df) {
df #%>%
# Convert type to character for binding
#mutate(StreetImageryDate = as.character(StreetImageryDate)) %>%
#mutate(StreetImageryDate = parse_date_time(StreetImageryDate, orders = "my")) %>%
#mutate(StreetImageryDate = as.character(StreetImageryDate))
}
)
# Combine all data frames into one using bind_rows from dplyr, adding a column for sheet name
combined_df <- bind_rows(data_frames,
.id = "Sheet") %>%
filter(!is.na(MedianType)) # Filter out NA's
# Assign the combined data frame to the specified variable name in the parent environment
assign(output_df_name, combined_df, envir = .GlobalEnv)
}
# Example usage:
# excel_file <- "C:\\Users\\HP\\Downloads\\Coyote CROS Medians.xlsx"
# output_df_name <- "coyote_df"
# process_excel_sheets(excel_file, output_df_name)
library(sf)
library(dplyr)
library(readxl)
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
deer_path <- "D:\\Downloads\\D9 Deer CROS Medians.xlsx"
process_excel_sheets(deer_path, "deer_raw")
deer_raw <- deer_raw %>%
rename(nid = NID)
deer_df <- merge(as.data.frame(deer), deer_raw, "nid")
deer_df <- deer_df %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", Notes, ignore.case = TRUE)) # Remove bridges
deer_count <- deer_df %>%
count(MedianType) %>%
rename(Count = n)
random_df <- as.data.frame(random) %>%
# rename(MedianType = MednTyp,
#        MedianNotes = MednNts) %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", MedianNotes, ignore.case = TRUE)) %>% # Remove bridges
mutate(MedianType = case_when( # Standardize values
MedianType == "vegetative, thrie beam" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "thrie beam, vegetative" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "gravel, vegetative" ~ "vegetative",
MedianType == "vegetative, gravel" ~ "vegetative",
MedianType == "temp concrete" ~ "concrete",
MedianType == "thrie beam and veg" ~ "thrie beam",
TRUE ~ MedianType  # Retain original value if no condition is met
))  %>%
filter(MedianType != "thrie beam")
# set.seed(123)  # Set a seed for reproducibility
# random_df <- random_df %>%
#   slice_sample(n = 273)
random_count <- random_df %>%
count(MedianType) %>%
rename(Count = n)
# Calculate total counts
total_observed <- sum(deer_count$Count)
total_expected <- sum(random_count$Count)
# Calculate proportions
observed_proportions <- deer_count$Count / total_observed
expected_proportions <- random_count$Count / total_expected
# Perform Chi-Square Goodness of Fit Test
chisq_test <- chisq.test(deer_count$Count, p = expected_proportions)
print(chisq_test)
library(sf)
library(dplyr)
library(readxl)
random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Medians.shp")
#random <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\RandomPoints\\D9_Random_Exclusion100m.gpkg")
deer <- st_read("H:\\Median Barriers\\District Spatial Data\\D9 Spatial Data\\MuleDeer\\D9_MuleDeer_NoStack.gpkg")
deer_path <- "D:\\Downloads\\D9 Deer CROS Medians.xlsx"
process_excel_sheets(deer_path, "deer_raw")
deer_raw <- deer_raw %>%
rename(nid = NID)
deer_df <- merge(as.data.frame(deer), deer_raw, "nid")
deer_df <- deer_df %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", Notes, ignore.case = TRUE)) # Remove bridges
deer_count <- deer_df %>%
count(MedianType) %>%
rename(Count = n)
random_df <- as.data.frame(random) %>%
rename(MedianType = MednTyp,
MedianNotes = MednNts) %>%
filter(rowSums(across(everything(), ~ grepl("overpass", ., ignore.case = TRUE))) == 0) %>% # Remove overpasses
filter(!grepl("bridge", MedianNotes, ignore.case = TRUE)) %>% # Remove bridges
mutate(MedianType = case_when( # Standardize values
MedianType == "vegetative, thrie beam" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "thrie beam, vegetative" ~ "thrie beam", # Change to thrie beam, otherwise count too low
MedianType == "gravel, vegetative" ~ "vegetative",
MedianType == "vegetative, gravel" ~ "vegetative",
MedianType == "temp concrete" ~ "concrete",
MedianType == "thrie beam and veg" ~ "thrie beam",
TRUE ~ MedianType  # Retain original value if no condition is met
))  %>%
filter(MedianType != "thrie beam")
# set.seed(123)  # Set a seed for reproducibility
# random_df <- random_df %>%
#   slice_sample(n = 273)
random_count <- random_df %>%
count(MedianType) %>%
rename(Count = n)
# Calculate total counts
total_observed <- sum(deer_count$Count)
total_expected <- sum(random_count$Count)
# Calculate proportions
observed_proportions <- deer_count$Count / total_observed
expected_proportions <- random_count$Count / total_expected
# Perform Chi-Square Goodness of Fit Test
chisq_test <- chisq.test(deer_count$Count, p = expected_proportions)
print(chisq_test)
